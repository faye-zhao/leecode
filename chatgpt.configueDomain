To configure your **web server** on a virtual machine (VM) to be accessible through a **domain name** instead of an IP address, you need to configure both your **domain settings** and your **web server** settings. Here’s a step-by-step guide:

### **1. Configure Domain DNS Settings**

To link your domain to your virtual machine's IP address, you need to set up **DNS records** for your domain.

#### Steps:
1. **Login to Your Domain Provider’s Dashboard**:
   - Go to the control panel or DNS management section of the registrar where you purchased your domain (e.g., GoDaddy, Namecheap, Google Domains, etc.).

2. **Add an A Record**:
   - **A Record** maps your domain to the public IP address of your virtual machine.
   - Find the **DNS settings** or **Manage DNS** option.
   - Add an **A Record** for your domain pointing to your VM's IP address:
     - **Type**: A
     - **Host/Name**: `@` (represents your domain, e.g., `example.com`)
     - **Value/IP Address**: Enter your VM's public IP address.
     - **TTL**: Leave the default or set it to a lower value like `300` seconds (optional).

   Example:
   ```
   Type: A
   Name: @
   Value: 123.45.67.89 (your VM's IP)
   TTL: 300
   ```

3. **(Optional) Add a CNAME Record for www**:
   - If you want to make the domain accessible with the `www` subdomain (e.g., `www.example.com`), add a **CNAME record**.
   - **CNAME Record** maps a subdomain (like `www`) to your domain.
     - **Type**: CNAME
     - **Host/Name**: `www`
     - **Value**: `@` (points to the root domain).
     - **TTL**: Default or `300`.

   Example:
   ```
   Type: CNAME
   Name: www
   Value: @
   TTL: 300
   ```

#### Propagation:
- DNS changes can take some time to propagate across the internet, though it’s usually effective within a few minutes to a few hours.

### **2. Configure the Web Server on the Virtual Machine**

Next, you need to configure your **web server** (e.g., Apache, Nginx) to handle requests for your domain.

#### **For Nginx**:

1. **SSH into your Virtual Machine**:
   - Use an SSH client to access your VM:
     ```bash
     ssh user@your-vm-ip
     ```

2. **Update Nginx Configuration**:
   - Open the Nginx configuration file for your website. It’s typically located in `/etc/nginx/sites-available/` or `/etc/nginx/conf.d/`.
   - If there isn’t already a configuration for your domain, create a new one:
     ```bash
     sudo nano /etc/nginx/sites-available/example.com
     ```

   Add the following content (adjust as needed):
   ```nginx
   server {
       listen 80;
       server_name example.com www.example.com;

       root /var/www/html;  # Change this to the path where your website files are stored
       index index.html index.htm;

       location / {
           try_files $uri $uri/ =404;
       }
   }
   ```

3. **Enable the Site**:
   - If you are using `/sites-available/`, create a symbolic link in `/sites-enabled/` to enable the site:
     ```bash
     sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/
     ```

4. **Test and Reload Nginx**:
   - Test the Nginx configuration to ensure there are no syntax errors:
     ```bash
     sudo nginx -t
     ```
   - If the test is successful, reload Nginx to apply the changes:
     ```bash
     sudo systemctl reload nginx
     ```

#### **For Apache**:

1. **SSH into your Virtual Machine**:
   - Use SSH to log into your virtual machine:
     ```bash
     ssh user@your-vm-ip
     ```

2. **Update Apache Configuration**:
   - Navigate to the **Apache configuration directory** (typically `/etc/apache2/sites-available/`).
   - Create or edit the configuration file for your domain:
     ```bash
     sudo nano /etc/apache2/sites-available/example.com.conf
     ```

   Add the following content:
   ```apache
   <VirtualHost *:80>
       ServerName example.com
       ServerAlias www.example.com

       DocumentRoot /var/www/html  # Change this to your website’s root directory
       DirectoryIndex index.html index.php

       <Directory /var/www/html>
           Options -Indexes +FollowSymLinks
           AllowOverride All
       </Directory>

       ErrorLog ${APACHE_LOG_DIR}/error.log
       CustomLog ${APACHE_LOG_DIR}/access.log combined
   </VirtualHost>
   ```

3. **Enable the Site**:
   - Enable the site using the following command:
     ```bash
     sudo a2ensite example.com.conf
     ```

4. **Test and Restart Apache**:
   - Test the Apache configuration for any syntax errors:
     ```bash
     sudo apachectl configtest
     ```
   - If the test passes, restart Apache:
     ```bash
     sudo systemctl restart apache2
     ```

### **3. Set Up SSL (Optional but Recommended)**

To make your site secure (accessible via `https`), you need to install an **SSL certificate**. You can use **Let’s Encrypt** to get a free SSL certificate.

1. **Install Certbot (for Nginx/Apache)**:
   - Install Certbot for Nginx or Apache using your package manager.
     ```bash
     sudo apt install certbot python3-certbot-nginx  # For Nginx
     sudo apt install certbot python3-certbot-apache  # For Apache
     ```

2. **Obtain SSL Certificate**:
   - Run Certbot to obtain an SSL certificate for your domain.
     ```bash
     sudo certbot --nginx -d example.com -d www.example.com  # For Nginx
     sudo certbot --apache -d example.com -d www.example.com  # For Apache
     ```

3. **Follow Instructions**:
   - Certbot will guide you through the process of installing the SSL certificate and configuring your server to use HTTPS.

4. **Auto-Renew SSL**:
   - Set up a cron job to auto-renew the certificate:
     ```bash
     sudo certbot renew --dry-run
     ```

---

### **4. Access the Domain**
- Once DNS propagation is complete and your web server is configured, you should be able to access your website using the domain name (e.g., `http://example.com` or `https://example.com` if SSL is configured).

---

### **Summary**:
1. **Configure DNS**: Point your domain to your VM's IP address using an A record.
2. **Configure Web Server**:
   - For **Nginx**, edit the server block with your domain name and configure the root directory.
   - For **Apache**, set up a virtual host configuration with the domain and website directory.
3. **Set Up SSL** (optional): Use **Let’s Encrypt** to get a free SSL certificate for HTTPS.
4. **Access Your Website**: After DNS propagation, your website should be accessible via the domain name instead of the IP address.

Let me know if you need further help with any step!